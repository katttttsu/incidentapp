#  IncidentControllerIntegrationTest (統合テストクラス)を理解する為にまとめた。
Spring Boot アプリケーションに対する HTTP リクエストをテストし、正しいレスポンスや画面が返されることを確認するもの。クラス全体の流れを説明する。

## 構造
@SpringBootTest: Spring Boot アプリケーションの完全なコンテキストでテストを実行するためのアノテーション。
webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT はランダムなポートでサーバーを起動してテストする。
@AutoConfigureMockMvc: MockMvc を自動的に設定して、HTTPリクエストやレスポンスを模擬的に行うことができるようにする。

## フィールド:
MockMvc mockMvc: MockMvc を使って、実際のサーバーを起動せずに HTTP リクエストを模擬する。
IncidentRepository incidentRepository: インシデントデータを保存・取得するリポジトリを使用する。
ObjectMapper objectMapper: JavaオブジェクトをJSONに変換したり、その逆を行うためのツール。

## メソッド
setup()
各テストの前に実行されるメソッド。
incidentRepository.deleteAll() でインシデントデータをすべて削除し、新しいデータを挿入する。
IncidentEntity インスタンスを作成して、テスト用のデータを用意している。

testShowIncidents()
GET / エンドポイントをテストする。
期待される結果として、status().isOk()（HTTP 200 OK）が返されることを確認し、index というビュー（テンプレート）が使用されていること、そして incidents や categoryCounts などのモデル属性が存在することを確認する。

testCreateIncident()
新しいインシデントを作成する POST /incidents エンドポイントをテストする。
IncidentForm というフォームオブジェクトにデータを設定し、flashAttr でフォームをリクエストに渡す。
結果としてリダイレクト（status().is3xxRedirection()）し、/ に戻ることを確認する。

testGenerateAISuggestion()
POST /generateAISuggestion エンドポイントをテストする。
リクエストボディに「靴下で移動しようとしていた」という原因をJSONで送信し、AIが提案を生成するAPIをテストする。
結果として、レスポンスが application/json 形式であり、JSONレスポンスの中に suggestion というフィールドがあることを確認する。

testDeleteIncident()
インシデント削除を行う POST /incidents/{id}/delete エンドポイントをテストする。
最初に incidentRepository.findAll().get(0) で削除対象のインシデントのIDを取得し、削除リクエストを送信する。
結果としてリダイレクトされ、/ に戻ることを確認する。

testSearchIncidents()
インシデント検索を行う GET /searchIncidents エンドポイントをテストする。
検索条件（年、月、部門、職業）を指定し、結果として index ビューが表示され、incidents や categoryCounts などのモデル属性が存在することを確認する。

## まとめ
このテストクラスは、インシデントの一覧表示、作成、削除、AI提案生成、検索機能など、IncidentController が提供する主要なエンドポイントを統合的にテストする。
MockMvc を使うことで、実際のWebサーバーを立ち上げずにHTTPリクエストを模擬的に行い、アプリケーションが期待通りに動作するかを確認することができる。
