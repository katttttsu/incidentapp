# OpenAiの使用方法についての復習
Spring Boot を使用して、ユーザーから送信された原因 (cause) に基づいて、OpenAI の API を使って提案を生成し、それをクライアントに返す REST エンドポイントを実装しています。コードを段階的に解説します。

## 1. @PostMapping と @ResponseBody
@PostMapping("/generateAISuggestion")\
@ResponseBody\
public Map<String, String> generateAISuggestion(@RequestBody Map<String, String> request) {

@PostMapping("/generateAISuggestion") は、HTTP POST リクエストを /generateAISuggestion エンドポイントにマッピングする。\
@ResponseBody は、メソッドの戻り値が HTTP レスポンスのボディとしてクライアントに直接返されることを意味する。\
generateAISuggestion メソッドは、リクエストボディとして送信された JSON データを Map<String, String> 型で受け取り、そのデータを使って処理を行う。
## 2. cause パラメータの処理
String cause = request.get("cause");\
if (cause == null || cause.trim().isEmpty()) {\
    cause = "原因が提供されていません。";\
}

クライアントから送信されたリクエストの中から cause を取得する。\
cause が null または空であれば、デフォルトのメッセージ「原因が提供されていません。」を代入する。
## 3. OpenAI に送信するプロンプトの生成
String prompt = "以下の問題の原因については記載しないでください。対策のみ教えてください。\n問題: " + cause + "\n対策:";\

prompt には、OpenAI に送信する指示文を組み立てている。ここでは、cause に基づいて対策だけを返すように指示している。
## 4. OpenAI API へのリクエストを送信するメソッド
String suggestion = getAIPrediction(prompt);

getAIPrediction メソッドを呼び出して、生成された prompt に基づく提案 (suggestion) を取得する。
## 5. 提案のレスポンスを組み立てる
Map<String, String> response = new HashMap<>();\
response.put("suggestion", suggestion);\
return response;

提案 (suggestion) を Map<String, String> に追加し、そのマップをクライアントに返す。\
## 6. OpenAI API と通信する getAIPrediction メソッド
private String getAIPrediction(String prompt) {\

このメソッドは、OkHttpClient を使用して OpenAI API へのリクエストを行い、応答を処理する。\
OkHttpClientはHttpリクエストを簡単に送信し、レスポンスを受け取る事でできるライブラリ。シンプルなAPIで非同期リクエストもサポートしている。また接続の再利用や接続プールの管理が自動的に行われる。
## 7. OkHttpClient と MediaType の設定
OkHttpClient client = new OkHttpClient();\
MediaType mediaType = MediaType.get("application/json; charset=utf-8");

OkHttpClient は、HTTP リクエストを送信するためのクライアント。\
MediaType は、リクエストボディが JSON 形式であることを指定している。
## 8. リクエストボディの構築
JSONObject jsonBody = new JSONObject();\
jsonBody.put("model", "gpt-3.5-turbo");\
jsonBody.put("messages", new JSONArray().put(new JSONObject().put("role", "user").put("content", prompt)));\
jsonBody.put("max_tokens", 300);\
jsonBody は、OpenAI API に送信する JSON ペイロードを構築しています。

model は使用するモデルを指定しています (gpt-3.5-turbo)。\
messages は、ユーザーからのメッセージを含む配列で、prompt がここに含まれています\。
max_tokens は、生成されるレスポンスの最大トークン数を指定しています。
## 9. HTTP リクエストの作成
okhttp3.RequestBody body = okhttp3.RequestBody.create(jsonBody.toString().getBytes(StandardCharsets.UTF_8), mediaType);\
Request request = new Request.Builder()\
        .url("https://api.openai.com/v1/chat/completions")\
        .post(body)\
        .addHeader("Authorization", "Bearer " + openaiApiKey)\
        .addHeader("Content-Type", "application/json; charset=utf-8")\
        .build();
        
RequestBody でリクエストボディを作成し、Request.Builder でリクエストを構築している。\
url には OpenAI のエンドポイントを指定している。\
Authorization ヘッダーに、OpenAI API キーを含めている。
## 10. リクエストの実行とレスポンスの処理
try (Response response = client.newCall(request).execute()) {\
    if (response.isSuccessful() && response.body() != null) {\
        String responseBody = new String(response.body().bytes(), StandardCharsets.UTF_8);

        JSONObject jsonObject = new JSONObject(responseBody);\
        if (jsonObject.has("choices") && jsonObject.getJSONArray("choices").length() > 0) {\
            return jsonObject.getJSONArray("choices").getJSONObject(0).getJSONObject("message").getString("content").trim();\
        } else {\
            return "提案が取得できませんでした: レスポンスに 'choices' が含まれていません。";\
        }\
    } else {\
        String errorResponse = response.body() != null ? new String(response.body().bytes(), StandardCharsets.UTF_8) : "No response body";\
        return handleAPIError(errorResponse);\
    }\
} catch (IOException e) {\
    e.printStackTrace();\
    return "提案が取得できませんでした: " + e.getMessage();\
}

newCall(request).execute() でリクエストを同期的に実行し、レスポンスを取得する。\
レスポンスが成功 (response.isSuccessful()) であり、レスポンスボディが存在する場合、レスポンスを JSON として解析し、提案を取得する。\
choices 配列の最初の要素の content フィールドから提案のテキストを取得する。\
エラーが発生した場合やレスポンスが期待通りでない場合、エラーメッセージを返す。\
## まとめ
このコードは、クライアントから送信された原因 (cause) を基に、OpenAI の API を使用して提案 (suggestion) を生成し、その結果をクライアントに返すエンドポイントを実装しています。OkHttpClient を使用して HTTP リクエストを行い、取得したデータを処理する。\4
さらにはHTMLへの記述やAppApplication.javaへのOpenAiのキー番号（sk-----------)の記述（環境変数の設定が好ましい）が必要となる。
