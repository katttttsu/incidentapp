# Entityクラスの役割について復習した。 
Javaアプリケーションにおいてデータベースとやり取りするためのデータモデル（エンティティ）を定義するクラス。
通常、エンティティクラスは、データベースのテーブルに対応するものであり、テーブルの各列はエンティティクラスのフィールドに対応する。
アプリケーションがデータベースとオブジェクト指向的に連携できるようになる。エンティティを使用することで、データベースとのやり取りがより簡単かつ直感的に行えるようにする。

## 主な役割:
データモデルの定義:
エンティティクラスは、データベースのテーブルと直接対応するデータモデルを定義する。
クラスの各フィールドは、データベーステーブルの列に対応する。

データの永続化:
エンティティは、オブジェクトリレーショナルマッピング（ORM）フレームワーク（例えば、JPAやHibernate）を使用して、データベース内のデータとJavaオブジェクトの間でデータの保存や読み込みを行うために使用される。

データベース操作の簡素化:
エンティティクラスを使用することで、SQLを直接書かずにデータベース操作を行うことができる。これにより、データベース操作の複雑さが軽減され、コードの可読性が向上する。

リレーションの管理:
複数のエンティティクラス間でリレーション（関連）を定義できる。例えば、「1対多」「多対多」などのリレーションシップをエンティティクラス間で定義し、ORMがこれらのリレーションを管理する。

## クラスの詳細:
クラス宣言とアノテーション:
@Entity: このクラスがエンティティであり、データベースのテーブルに対応することを示す。
@Table(name = "incidents"): このエンティティが incidents という名前のテーブルにマッピングされることを指定する。

フィールドの宣言とアノテーション:
各フィールドには @Column アノテーションが付けられ、対応するデータベースの列を指定している。@Id と @GeneratedValue(strategy = GenerationType.IDENTITY) は、このフィールドが主キーであり、自動的に生成されることを示す。

コンストラクタ:
デフォルトコンストラクタ（引数なしのコンストラクタ）が用意されており、エンティティオブジェクトの初期化に使用される。

ゲッターとセッター:
各フィールドに対応するゲッターとセッターが定義されている。これにより、フィールドの値を取得したり設定したりすることができる。

追加メソッド:
getMonth() メソッドは、incidentDate が設定されている場合、その月を取得するためのメソッド。
