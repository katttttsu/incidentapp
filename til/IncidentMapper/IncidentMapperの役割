# IncidentMapperの役割についてまとめた。

## Mapper の役割
Mapper インターフェースは、Javaアプリケーションとデータベースとの間のデータマッピング（変換）を行うための機能を提供する。
具体的には、データベーステーブルのレコードとJavaオブジェクトを相互に変換するためのメソッドを定義する。

### 主な役割
データベース操作の定義:
Mapper は、データベース操作（SELECT、INSERT、UPDATE、DELETE など）を行うメソッドを定義する。
これらのメソッドは、SQLクエリを実行し、その結果をJavaオブジェクトとして返す。

### SQLクエリのマッピング:
Mapper インターフェースに定義されたメソッドは、SQLクエリを実行するために使われる。
メソッドにアノテーション（@Select、@Insert、@Update、@Delete など）を付けることで、対応するSQLクエリが実行される。

### データ変換:
SQLクエリの結果セットをJavaオブジェクト（エンティティ）に変換したり、Javaオブジェクトをデータベースに保存するためのSQLクエリに変換したりする。
この変換をシンプルかつ効率的に行うために Mapper が利用される。

### ビジネスロジックからのデータベース操作の抽象化:
Mapper は、ビジネスロジックを担当するサービス層からデータベース操作の詳細を隠蔽する。
これにより、サービス層は具体的なSQLクエリやデータベースの詳細を気にすることなく、データベース操作を行うことができる。

## IncidentMapper インターフェースが定義されていると、可能になる事：

### データベースからインシデントを取得:
findById(Long id) メソッドを使用して、指定した id に対応するインシデントデータをデータベースから取得し、それを IncidentEntity として返すことができる。

### データベースにインシデントを挿入:
insert(...) メソッドを使用して、新しいインシデントデータをデータベースに挿入することができる。

### データベース内のインシデントを更新:
update(...) メソッドを使用して、既存のインシデントデータを更新できる。

### 特定の条件に基づいてインシデントを検索:
findByCriteria(...) メソッドを使用して、特定の期間や条件に基づいてインシデントを検索できる。

## まとめ
Mapper インターフェースは、Javaアプリケーションとデータベースとの間でデータをやり取りする際に、オブジェクトとリレーショナルデータベースの間のデータの変換（マッピング）を簡単に行えるようにする。
これにより、データベース操作が抽象化され、よりシンプルかつ安全にデータのやり取りが行えるようになる。
