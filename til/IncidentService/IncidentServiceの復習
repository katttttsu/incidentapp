# Serviceの理解を深める為復習を行った。

IncidentService クラスは、インシデントデータの集計や検索を行うためのサービスクラスです。このクラスでは、特定の年におけるインシデントの数をカテゴリ別、レベル別、部門別、職種別に集計したり、年間の総件数を取得したりするためのメソッドが実装されています。

## 1. クラス定義とフィールド
@Service
public class IncidentService {
    @Autowired
    private IncidentRepository incidentRepository;
@Service アノテーションにより、このクラスはSpringのサービス層のコンポーネントとして扱われる。\
IncidentRepository は @Autowired され、データベースからインシデントデータを取得するために使用される。\
@Autowiredを使用する事でSpringのコンテナが自動的に適切な型のBeanを探してフィールドやコンストラクタ、またはセッターに注入する。\

## メソッドの詳細
### 1. getAnnualTotal(int year)\
public int getAnnualTotal(int year) {\
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);\
    return incidents.size();\
}\
指定された年に発生したインシデントの総件数を取得する。\
incidentRepository.findByYear(year) を使用して、特定の年のインシデントリストを取得し、そのリストのサイズを返す。\
return incidents.size();は、リストであるincidents に入っているインシデントの数をreturnでメソッドの呼び出し元に返す。
### 2. findAll()
public List<IncidentData> findAll() {\
    return incidentRepository.findAll();\
}\
全てのインシデントデータを取得する。\
incidentRepository.findAll() メソッドを呼び出して、すべてのインシデントを取得する。
### 3. getCategoryCounts(List<IncidentEntity> incidents)
public Map<String, Integer> getCategoryCounts(List<IncidentEntity> incidents) {\
    Map<String, Integer> counts = new HashMap<>();\
    for (IncidentEntity incident : incidents) {\
        String category = incident.getCategory() + " ／ " + incident.getSegment();\
        counts.put(category, counts.getOrDefault(category, 0) + 1);\
    }\
    return counts;\
}\
インシデントリストからカテゴリごとの件数を集計し、カテゴリ名とその件数を保持するマップを返す。\
カテゴリとサブカテゴリを連結した文字列をキーとして使用し、同じカテゴリが出現するたびにそのカウントを増加させる。
### 4. getLevelCounts(List<IncidentEntity> incidents)
public Map<String, Integer> getLevelCounts(List<IncidentEntity> incidents) {\
    Map<String, Integer> counts = new HashMap<>();\
    for (IncidentEntity incident : incidents) {\
        String level = incident.getLevel();\
        counts.put(level, counts.getOrDefault(level, 0) + 1);\
    }\
    return counts;\
}\
インシデントリストからレベルごとの件数を集計する。\
レベル名をキーにして、そのレベルに対応するインシデントの数をカウントする。
### 5. getDepartmentCounts(List<IncidentEntity> incidents)
public Map<String, Integer> getDepartmentCounts(List<IncidentEntity> incidents) {\
    Map<String, Integer> counts = new HashMap<>();\
    for (IncidentEntity incident : incidents) {\
        String department = incident.getDepartment();\
        counts.put(department, counts.getOrDefault(department, 0) + 1);\
    }\
    return counts;\
}\
インシデントリストから部門ごとの件数を集計する。\
部門名をキーにして、その部門に対応するインシデントの数をカウントする。
### 6. getJobCounts(List<IncidentEntity> incidents)
public Map<String, Integer> getJobCounts(List<IncidentEntity> incidents) {\
    Map<String, Integer> counts = new HashMap<>();\
    for (IncidentEntity incident : incidents) {\
        String job = incident.getJob();\
        counts.put(job, counts.getOrDefault(job, 0) + 1);\
    }\
    return counts;\
}\
インシデントリストから職種ごとの件数を集計する。\
職種名をキーにして、その職種に対応するインシデントの数をカウントする。
## 年次サマリーの集計メソッド
これらのメソッドは、年ごとのインシデントをカテゴリ別、レベル別、部門別、職種別に月単位で集計する。

### 1. countIncidentsByLevel(int year)
public Map<String, Map<Integer, Integer>> countIncidentsByLevel(int year) {\
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);\
    Map<String, Map<Integer, Integer>> levelData = new LinkedHashMap<>();
    
    List<String> levels = Arrays.asList("0", "1", "2", "3a", "3b", "4", "5");
    for (String level : levels) {\
        Map<Integer, Integer> monthData = new LinkedHashMap<>();\
        for (int month = 1; month <= 12; month++) {\
            monthData.put(month, 0);\
        }\
        levelData.put(level, monthData);\
    }

    for (IncidentEntity incident : incidents) {\
        String level = incident.getLevel();\
        int month = incident.getDate().getMonthValue();\
        if (levelData.containsKey(level)) {\
            levelData.get(level).put(month, levelData.get(level).get(month) + 1);\
        }\
    }\

    return levelData;\
}\
指定された年におけるレベル別のインシデントを月ごとに集計し、月ごとの件数を持つマップを返す。\
各レベルごとに1月から12月までのデフォルト値（0）を持つマップを準備し、対応するインシデントが見つかるたびにカウントを増加させる。\
表機能で項目の順番を変更する為にはMap<String, Map<Integer, Integer>> jobData = new LinkedHashMap<>();　　※new HashMap<>()ではなくnew LinkedHashMap<>()と記述し、List<String> jobs = Arrays.asList(表示させたい名称をダブルクォーテーション順番に記述);\
### 2. countIncidentsByCategory(int year)
public Map<String, Map<Integer, Integer>> countIncidentsByCategory(int year) {\
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);\
    Map<String, Map<Integer, Integer>> categoryData = new LinkedHashMap<>();
    
    List<String> categories= Arrays.asList("転倒・転落", "外傷", "薬剤", "食事", "受付", "診察", "検査・処置", "放射線", "リハビリ", "機器操作", "チューブ・カテーテル", "輸液ルート", "手術", "その他");\
    for (String category : categories) {\
        Map<Integer, Integer> monthData = new HashMap<>();\
        for (int month = 1; month <= 12; month++) {\
            monthData.put(month, 0);\
        }\
        categoryData.put(category, monthData);\
    }

    for (IncidentEntity incident : incidents) {\
        String category = incident.getCategory();\
        int month = incident.getDate().getMonthValue();\
        if (categoryData.containsKey(category)) {\
            categoryData.get(category).put(month, categoryData.get(category).get(month) + 1);\
        }\
    }

    return categoryData;\
}\
指定された年におけるカテゴリ別のインシデントを月ごとに集計し、月ごとの件数を持つマップを返す。\
### 3. countIncidentsByDepartment(int year)
public Map<String, Map<Integer, Integer>> countIncidentsByDepartment(int year) {\
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);\
    Map<String, Map<Integer, Integer>> departmentData = new LinkedHashMap<>();

    for (String department : departments) {\
        Map<Integer, Integer> monthData = new HashMap<>();\
        for (int month = 1; month <= 12; month++) {\
            monthData.put(month, 0);\
        }\
        departmentData.put(department, monthData);\
    }

    for (IncidentEntity incident : incidents) {\
        String department = incident.getDepartment();\
        int month = incident.getDate().getMonthValue();\
        if (departmentData.containsKey(department)) {\
            departmentData.get(department).put(month, departmentData.get(department).get(month) + 1);\
        }\
    }

    return departmentData;\
}\
指定された年における部門別のインシデントを月ごとに集計し、月ごとの件数を持つマップを返す。
### 4. countIncidentsByJob(int year)
public Map<String, Map<Integer, Integer>> countIncidentsByJob(int year) {\
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);\
    Map<String, Map<Integer, Integer>> jobData = new LinkedHashMap<>();
    
    List<String> departments = Arrays.asList("整形外科", "形成外科", "外科", "皮膚科", "循環器内科", "呼吸器内科", "呼吸器外科", "消火器内科", "脳神経外科", "泌尿器科", "眼科", "麻酔科", "放射線科", "リハビリテーション科", "薬剤部", "医療技術部", "看護部", "その他");\
    for (String job : jobs) {\
        Map<Integer, Integer> monthData = new HashMap<>();\
        for (int month = 1; month <= 12; month++) {\
            monthData.put(month, 0);\
        }\
        jobData.put(job, monthData);\
    }

    List<String> jobs = Arrays.asList("医師", "看護師", "薬剤師", "理学療法士", "作業療法士", "視能訓練士", "臨床検査技師", "臨床工学技士", "診療放射線技師", "看護補助者", "事務員", "その他");\
    for (IncidentEntity incident : incidents) {\
        String job = incident.getJob();\
        int month = incident.getDate().getMonthValue();\
        if (jobData.containsKey(job)) {\
            jobData.get(job).put(month, jobData.get(job).get(month) + 1);\
        }\
    }

    return jobData;\
}\
指定された年における職種別のインシデントを月ごとに集計し、月ごとの件数を持つマップを返す。
## 集計結果を合計するメソッド
これらのメソッドは、各カテゴリやレベル、部門、職種ごとの年間の合計件数を計算する。\

### 1. getLevelTotals(int year)
public Map<String, Integer> getLevelTotals(int year) {\
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);\
    Map<String, Integer> levelTotals = new HashMap<>();

    for (String level : levels) {\
        levelTotals.put(level, 0);\
    }

    for (IncidentEntity incident : incidents) {\
        String level = incident.getLevel();\
        levelTotals.put(level, levelTotals.getOrDefault(level, 0) + 1);\
    }

    return levelTotals;\
}\
指定された年におけるレベルごとの合計件数を計算し、マップで返す。\
### 2. getCategoryTotals(int year)
public Map<String, Integer> getCategoryTotals(int year) {\
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);\
    Map<String, Integer> categoryTotals = new HashMap<>();

    for (String category : categories) {\
        categoryTotals.put(category, 0);\
    }

    for (IncidentEntity incident : incidents) {\
        String category = incident.getCategory();\
        categoryTotals.put(category, categoryTotals.getOrDefault(category, 0) + 1);\
    }

    return categoryTotals;\
}\
指定された年におけるカテゴリごとの合計件数を計算し、マップで返す。\
### 3. getDepartmentTotals(int year)
public Map<String, Integer> getDepartmentTotals(int year) {\
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);\
    Map<String, Integer> departmentTotals = new HashMap<>();

    for (String department : departments) {\
        departmentTotals.put(department, 0);\
    }

    for (IncidentEntity incident : incidents) {\
        String department = incident.getDepartment();\
        departmentTotals.put(department, departmentTotals.getOrDefault(department, 0) + 1);\
    }

    return departmentTotals;\
}\
指定された年における部門ごとの合計件数を計算し、マップで返す。\
### 4. getJobTotals(int year)
public Map<String, Integer> getJobTotals(int year) {\
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);\
    Map<String, Integer> jobTotals = new HashMap<>();

    for (String job : jobs) {\
        jobTotals.put(job, 0);\
    }

    for (IncidentEntity incident : incidents) {\
        String job = incident.getJob();\
        jobTotals.put(job, jobTotals.getOrDefault(job, 0) + 1);\
    }

    return jobTotals;\
}\
指定された年における職種ごとの合計件数を計算し、マップで返す。
