# インシデントの新規作成・更新・削除機能のまとめ
## 1. インシデントの作成・更新
@PostMapping("/incidents")
public String createIncident(@ModelAttribute IncidentForm incidentForm) {
    if (incidentForm.getId() == null) {
        incidentMapper.insert(
                incidentForm.getLevel(),
                incidentForm.getDate(), incidentForm.getTime(),
                incidentForm.getPlace(), incidentForm.getNumber(),
                incidentForm.getName(),
                incidentForm.getAge(),
                incidentForm.getDepartment(), incidentForm.getJob(),
                incidentForm.getContinuation(),
                incidentForm.getCategory(), incidentForm.getSegment(),
                incidentForm.getSituation(), incidentForm.getCause(),
                incidentForm.getSuggestion(), incidentForm.getCountermeasure()
        );
    } else {
        incidentMapper.update(
                incidentForm.getId(),
                incidentForm.getLevel(),
                incidentForm.getDate(),
                incidentForm.getTime(),
                incidentForm.getPlace(),
                incidentForm.getNumber(),
                incidentForm.getName(),
                incidentForm.getAge(),
                incidentForm.getDepartment(),
                incidentForm.getJob(),
                incidentForm.getContinuation(),
                incidentForm.getCategory(),
                incidentForm.getSegment(),
                incidentForm.getSituation(),
                incidentForm.getCause(),
                incidentForm.getSuggestion(),
                incidentForm.getCountermeasure()
        );
    }
    return "redirect:/index";
}


@PostMapping("/incidents")\
POSTリクエストで /incidents が呼ばれると、このメソッドが実行される。

public String:
このメソッドは、パブリックメソッドであり、外部から呼び出すことができる。
メソッドは String を返す。この String は、ビューの名前を表す。

showIncidents:
メソッドの名前。このメソッドはインシデント（事件、事故など）のデータを表示するためのメソッド。

Model model:
Model は、Spring Framework で使用されるオブジェクトで、ビューにデータを渡すために使用します。model.addAttribute() を使ってデータを追加します。

public String createIncident(@ModelAttribute IncidentForm incidentForm) {
    if (incidentForm.getId() == null) {
        incidentMapper.insert(
                incidentForm.getLevel(),
                incidentForm.getDate(), incidentForm.getTime(),
                incidentForm.getPlace(), incidentForm.getNumber(),
                incidentForm.getName(),
                incidentForm.getAge(),
                incidentForm.getDepartment(), incidentForm.getJob(),
                incidentForm.getContinuation(),
                incidentForm.getCategory(), incidentForm.getSegment(),
                incidentForm.getSituation(), incidentForm.getCause(),
                incidentForm.getSuggestion(), incidentForm.getCountermeasure()
        );
    } else {
        incidentMapper.update(
                incidentForm.getId(),
                incidentForm.getLevel(),
                incidentForm.getDate(),
                incidentForm.getTime(),
                incidentForm.getPlace(),
                incidentForm.getNumber(),
                incidentForm.getName(),
                incidentForm.getAge(),
                incidentForm.getDepartment(),
                incidentForm.getJob(),
                incidentForm.getContinuation(),
                incidentForm.getCategory(),
                incidentForm.getSegment(),
                incidentForm.getSituation(),
                incidentForm.getCause(),
                incidentForm.getSuggestion(),
                incidentForm.getCountermeasure()
        );
    }
incidentForm の id が null なら、新しいインシデントをデータベースに挿入し、そうでなければ既存のインシデントを更新する。\
全ての入力項目を設定しgetで受け取る。

return "redirect:/index";\
処理が完了したら、インデックスページにリダイレクトする。

# 2. インシデント一覧の表示
@GetMapping("/index")
public String showIncidents(Model model) {
    LocalDate now = LocalDate.now();
    List<IncidentEntity> incidents = getIncidents(now.getYear(), now.getMonthValue(), "", "");
    model.addAttribute("incidents", incidents);

    addGraphDataToModel(model, incidents);

    return "index";
}

LocalDate now = LocalDate.now();\
LocalDate は、日付を表すクラスで、時間の情報を持たない日付（年、月、日）のみを管理する。\
LocalDate.now():\
現在の日付を取得する。これにより、今日の日付（年、月、日）が now に格納される。

 List<IncidentEntity> incidents = getIncidents(now.getYear(), now.getMonthValue(), "", "");\
List<IncidentEntity> incidents:

List<IncidentEntity> は、インシデントデータを格納するリスト（配列のようなもの）。\
IncidentEntity は、インシデント（事件、事故など）のデータを格納するためのクラス。\
getIncidents(now.getYear(), now.getMonthValue(), "", ""):

getIncidents は、指定された年と月、そしてその他のフィルタリング条件に基づいてインシデントデータを取得するメソッド。\
now.getYear() は現在の年を取得し、now.getMonthValue() は現在の月を取得する。\
"" は、フィルタリング条件（例：部署や職種）を指定しないことを意味する。つまり、すべてのインシデントを取得する。

model.addAttribute("incidents", incidents):\
モデルに incidents という名前で、先ほど取得したインシデントデータを追加する。\
この incidents データは、ビュー（HTMLページ）でアクセスできるようになる。

addGraphDataToModel(model, incidents);\
このメソッドは、インシデントデータを使ってグラフ表示のためのデータをモデルに追加する。\
これにより、後でビューでインシデントデータをグラフ化するための準備が整える。

return "index";:\
このメソッドは、"index" という文字列を返します。この "index" は、Springがレンダリングすべきビューの名前。\
例えば、index.html というテンプレートファイルがある場合、それが表示する。

## インシデント編集
@GetMapping("/incidents/{id}")\
public String incidentDetail(@PathVariable long id, Model model) {\
    var incidentOptional = incidentRepository.findById(id);\
    var incident = incidentOptional.orElseThrow(() -> new IllegalArgumentException("Invalid incident Id:" + id));\
    model.addAttribute("incident", incident);

    return "detail";
}

@GetMapping("/incidents/{id}"):\
このアノテーションは、このメソッドが /incidents/{id} というURLに対するHTTP GETリクエストを処理することを示す。{id} はURLパスの一部で、特定のインシデントのIDを意味する。\

@PathVariable long id:\
このアノテーションは、URLから id の部分を取り出して、それをメソッドの引数 id として渡すことを意味する。\

incidentRepository.findById(id):\
incidentRepository を使って、指定されたIDに対応するインシデントをデータベースから探す。結果は Optional<IncidentEntity> という形式で返す。

incidentOptional.orElseThrow():\
インシデントが見つからなかった場合（Optional が空の場合）、IllegalArgumentException(例外の一つ)を投る。これにより、「Invalid incident Id:」というエラーメッセージが表示する。

model.addAttribute("incident", incident):\
incident オブジェクトを model に追加する。これにより、このデータが detail ビューで利用可能になる。

return "detail":\
detail という名前のビュー（通常はHTMLファイル）を表示するように指示する。

インシデントの更新（編集の確定）\
@PostMapping("/incidents/{id}/update")\
public String updateIncident(@PathVariable long id, @ModelAttribute("incidentForm") IncidentForm incidentForm) {\
    incidentMapper.update(\
            id, incidentForm.getLevel(),\
            incidentForm.getDate(), incidentForm.getTime(),\
            incidentForm.getPlace(),\
            incidentForm.getId(), incidentForm.getName(),\
            incidentForm.getAge(),\
            incidentForm.getDepartment(), incidentForm.getJob(),\
            incidentForm.getContinuation(),\
            incidentForm.getCategory(), incidentForm.getSegment(),\
            incidentForm.getSituation(), incidentForm.getCause(),\
            incidentForm.getSuggestion(), incidentForm.getCountermeasure()\
    );\
    return "redirect:/index";\
}

@PostMapping("/incidents/{id}/update"):\
このアノテーションは、このメソッドが /incidents/{id}/update というURLに対するHTTP POSTリクエストを処理することを示す。id はURLから取得され、インシデントを更新するために使われる。

@ModelAttribute("incidentForm") IncidentForm incidentForm:\
フォームから送信されたデータが incidentForm オブジェクトにバインドされる。incidentForm にはインシデントの情報が含まれる。

incidentMapper.update():\
このメソッドを使って、incidentForm に含まれるデータを使い、データベース内のインシデント情報を更新する。

return "redirect:/index":\
更新が完了したら、ユーザーをインシデント一覧ページにリダイレクトする。

インシデントの削除\
@PostMapping("/incidents/{id}/delete")\
public String deleteIncident(@PathVariable long id, @RequestParam("adminPassword") String inputPassword, Model model) {\
    if (!adminPassword.equals(inputPassword)) {\
        model.addAttribute("errorMessage", "管理者パスワードが間違っています");\
        return "redirect:/index";
    }
    incidentMapper.delete(id);\
    return "redirect:/index";\
}

@PostMapping("/incidents/{id}/delete"):\
このアノテーションは、このメソッドが /incidents/{id}/delete というURLに対するHTTP POSTリクエストを処理することを示す。

@RequestParam("adminPassword") String inputPassword:\
このアノテーションは、フォームから送信された adminPassword の値を inputPassword という変数にバインドする。

if (!adminPassword.equals(inputPassword)):\
入力された管理者パスワードが正しいかどうかをチェックする。正しくない場合はエラーメッセージを表示し、一覧ページにリダイレクトする。

incidentMapper.delete(id):\
指定されたIDのインシデントをデータベースから削除する。

return "redirect:/index":\
削除が完了したら、ユーザーをインシデント一覧ページにリダイレクトする。
