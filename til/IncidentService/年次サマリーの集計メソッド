# 年次サマリーの集計メソッド
public Map<String, Map<Integer, Integer>> countIncidentsByLevel(int year) {
    List<IncidentEntity> incidents = incidentRepository.findByYear(year);
    Map<String, Map<Integer, Integer>> levelData = new LinkedHashMap<>();

    List<String> levels = Arrays.asList("0", "1", "2", "3a", "3b", "4", "5");
    for (String level : levels) {
        Map<Integer, Integer> monthData = new LinkedHashMap<>();
        for (int month = 1; month <= 12; month++) {
            monthData.put(month, 0);
        }\
        levelData.put(level, monthData);
    }

    for (IncidentEntity incident : incidents) {
        String level = incident.getLevel();
        int month = incident.getDate().getMonthValue();
        if (levelData.containsKey(level)) {
            levelData.get(level).put(month, levelData.get(level).get(month) + 1);
        }
    }

    return levelData;
}

## 1. インシデントの取得
List<IncidentEntity> incidents = incidentRepository.findByYear(year);
指定された年 (year) に発生したすべてのインシデントをデータベースから取得し、そのリストを incidents という変数に保存する。
※この findByYear(year) メソッドは、データベースに問い合わせて、指定された年に関連するインシデントをすべて取得する。
## 2. レベルと月ごとのデータ構造を準備
Map<String, Map<Integer, Integer>> levelData = new LinkedHashMap<>();

for (String level : levels) {
    Map<Integer, Integer> monthData = new LinkedHashMap<>();
    for (int month = 1; month <= 12; month++) {
        monthData.put(month, 0);
    }
    levelData.put(level, monthData);
}
Map<String, Map<Integer, Integer>>は、キーが String 型で、値が Map<Integer, Integer> 型のマップを表す。
levelData というマップを作成する。このマップは、キーとして「レベル」を持ち、その値として「月ごとのインシデント数をカウントするマップ」を持つ。
各レベル（levels リスト内の値）について、12ヶ月分の初期値（0）を持つ monthData というマップを作成する。
この monthData を levelData に追加し、レベルごとに月別のカウントを行うための準備する。
※これにより、すべてのレベルについて、各月のインシデント数を記録するためのマップが準備される。

## 3. インシデントのカウント
for (IncidentEntity incident : incidents) {
    String level = incident.getLevel();
    int month = incident.getDate().getMonthValue();
    if (levelData.containsKey(level)) {
        levelData.get(level).put(month, levelData.get(level).get(month) + 1);
    }
}
取得したすべてのインシデント (incidents) を1つずつループして処理する。
それぞれのインシデントについて、その「レベル」と「発生月」を取得する。
levelData マップを使って、該当するレベルと月のカウントを1つ増やす。
※各インシデントのレベルと月をチェックし、それに対応するカウントを増やすことで、レベルごとの月別インシデント数が集計される。
4. 結果を返す
return levelData;
最終的に、レベルごとの月別インシデント数が記録された levelData を返す。

# 集計結果を合計する
各カテゴリやレベル、部門、職種ごとの年間の合計件数を計算する。

getLevelTotals は、指定された年に発生したインシデントを「レベルごと」に合計し、その結果を返すためのもの。

メソッド全体の流れ
## 1. インシデントの取得
List<IncidentEntity> incidents = incidentRepository.findByYear(year);
何をしているか: 指定された年 (year) に発生したすべてのインシデントをデータベースから取得し、そのリストを incidents という変数に保存する。
※この findByYear(year) メソッドは、データベースに問い合わせて、その年に関連するすべてのインシデントを取得する。
## 2. レベルごとの初期値設定
Map<String, Integer> levelTotals = new HashMap<>();

List<String> levels = Arrays.asList("0", "1", "2", "3a", "3b", "4", "5");
for (String level : levels) {
    levelTotals.put(level, 0);
}
levelTotals というマップを作成し、これは「レベル」をキーとし、そのレベルに対応するインシデント数を値として保持する。
levels というリストには、考えられるすべてのレベル（"0", "1", "2", "3a", "3b", "4", "5"）が含まれている。
このリストを使って、各レベルに初期値として0を設定する。
※この段階では、まだインシデントの数をカウントしていないので、すべてのレベルのインシデント数は0になっている。

## 3. インシデントのカウント
for (IncidentEntity incident : incidents) {
    String level = incident.getLevel();
    levelTotals.put(level, levelTotals.getOrDefault(level, 0) + 1);
}
取得したすべてのインシデント (incidents) を1つずつループして処理する。
各インシデントの「レベル」を取得する。
そのレベルに対応するカウントを1つ増やします。levelTotals.getOrDefault(level, 0) は、指定されたレベルのカウントが存在する場合はその値を、存在しない場合は0を返す。
※これにより、各レベルのインシデント数が正確にカウントされる。

## 4. 結果を返す
return levelTotals;
何をしているか: 最終的に、各レベルごとのインシデント数が記録された levelTotals マップを返す。
※これにより、指定された年に発生した各レベルのインシデントの合計数を確認できる。

全体のまとめ
全体の目的: このメソッドは、指定された年に発生したインシデントをレベルごとに集計し、その結果を返すもの。これにより、年間を通じてどのレベルのインシデントがどれだけ発生したかを把握することができる。

category, department, jobでの同様にコーディングを行う。

※表の順番変更
変更するクラス：Service
Map<String, Map<Integer, Integer>> jobData = new LinkedHashMap<>();と記入する（new HashMap<>()ではなくnew LinkedHashMap<>()にする）

List<String> jobs = Arrays.asList(表示させたい名称をダブルクォーテーション順番に記述);
